name: Release

on:
  push:
    # tags:
      # - 'v*.*.*'

env:
  RELEASE_BIN: vsr-new
  RELEASE_ADDS: README.md LICENSE

jobs: 
  build:
    name: Build release
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        build: [linux, macos, windows]
        include:
          - build: linux
            os: ubuntu-20.04
            rust: stable
            suffix: linux
          - build: macos
            os: ubuntu-20.04
            rust: stable
            suffix: macos
          - build: windows
            os: windows-2019
            rust: stable
            suffix: win64

    steps:
      - name: Checkout
        uses: actions/checkout@v2

      - name: Rust toolchain - Linux
        uses: actions-rs/toolchain@v1
        if: matrix.build == 'linux'
        with:
          toolchain: stable
          default: true
          override: true

      - name: Rust toolchain - Windows
        uses: actions-rs/toolchain@v1
        if: matrix.build == 'windows'
        with:
          toolchain: stable
          target: x86_64-pc-windows-gnu,i686-pc-windows-gnu
          default: true
          override: true

      - name: Build project - Linux
        if: matrix.build == 'linux'
        run: |
          cargo build --all --release 
          strip target/release/${{ env.RELEASE_BIN }} 
          mkdir -p builds/${{ env.RELEASE_BIN }}-${{ matrix.suffix }} dist
          cp target/release/${{ env.RELEASE_BIN }} builds/${{ env.RELEASE_BIN }}-${{ matrix.suffix }}
          tar -C builds -czvf dist/${{ env.RELEASE_BIN }}-${{ matrix.suffix }}.tar.gz ${{env.RELEASE_BIN }}-${{ matrix.suffix }}

      - name: Build project - Windows 64
        if: matrix.build == 'windows'
        run: |
          cargo rustc --release --target=x86_64-pc-windows-gnu
          mkdir -p builds/${{ env.RELEASE_BIN }}-win64 dist
          cp target/x86_64-pc-windows-gnu/release/${{ env.RELEASE_BIN }}.exe builds/${{ env.RELEASE_BIN }}-win64
          tar -C builds -czvf dist/${{ env.RELEASE_BIN }}-win64.tar.gz ${{ env.RELEASE_BIN }}-win64
      
      - name: Build project - Windows 32
        if: matrix.build == 'windows'
        run: |
          cargo rustc --release --target=i686-pc-windows-gnu
          mkdir -p builds/${{ env.RELEASE_BIN }}-win32 dist
          cp target/i686-pc-windows-gnu/release/${{ env.RELEASE_BIN }}.exe builds/${{ env.RELEASE_BIN }}-win32
          tar -C builds -czvf dist/${{ env.RELEASE_BIN }}-win32.tar.gz ${{ env.RELEASE_BIN }}-win32

      - name: Cache Mac OS dependencies
        if: matrix.build == 'macos'
        id: cache-macos
        uses: actions/cache@v1
        with:
          path: osxcross
          key: ${{ runner.os }}-osxcross

      - name: Install Mac OS dependencies
        if: matrix.build == 'macos' && steps.cache-macos.outputs.cache-hit != 'true'
        run: |
          git clone https://github.com/tpoechtrager/osxcross
          cd osxcross
          sudo tools/get_dependencies.sh
          wget -nc https://s3.dockerproject.org/darwin/v2/MacOSX10.10.sdk.tar.xz
          mv MacOSX10.10.sdk.tar.xz tarballs/
          UNATTENDED=yes OSX_VERSION_MIN=10.7 ./build.sh

      - name: Build project - Mac OS
        if: matrix.build == 'macos'
        run: |
          export PATH="$(pwd)/osxcross/target/bin:$PATH"
          export LIBZ_SYS_STATIC=1
          export CC=o64-clang
          export CXX=o64-clang++
          cargo build --release --target "x86_64-apple-darwin"
          mkdir builds/${{ env.RELEASE_BIN }}-${{ matrix.suffix }} dist
          cp target/x86_64-apple-darwin/release/${{ env.RELEASE_BIN }} builds/${{ env.RELEASE_BIN }}-${{ matrix.suffix }}
          tar -C builds -czvf dist/${{ env.RELEASE_BIN }}-${{ matrix.suffix }}.tar.gz ${{ env.RELEASE_BIN }}-${{ matrix.suffix }}

      - name: Upload build - Linux
        if: matrix.build == 'linux'
        uses: actions/upload-artifact@v2
        with:
          name: ${{ env.RELEASE_BIN }}-${{ matrix.suffix }}.tar.gz
          path: dist/${{ env.RELEASE_BIN }}-${{ matrix.suffix }}.tar.gz

      - name: Upload build - Mac OS
        if: matrix.build == 'macos'
        uses: actions/upload-artifact@v2
        with:
          name: ${{ env.RELEASE_BIN }}-${{ matrix.suffix }}.tar.gz
          path: dist/${{ env.RELEASE_BIN }}-${{ matrix.suffix }}.tar.gz

      - name: Upload build - Win32
        if: matrix.build == 'windows'
        uses: actions/upload-artifact@v2
        with:
          name: ${{ env.RELEASE_BIN }}-win32.tar.gz
          path: dist/${{ env.RELEASE_BIN }}-win32.tar.gz
      
      - name: Upload build - Win64
        if: matrix.build == 'windows'
        uses: actions/upload-artifact@v2
        with:
          name: ${{ env.RELEASE_BIN }}-win64.tar.gz
          path: dist/${{ env.RELEASE_BIN }}-win64.tar.gz

  upload:
    runs-on: ubuntu-20.04
    needs: [build]
    steps:
      - name: Checkout
        uses: actions/checkout@v2

      - name: Create dist folder
        run: |
          mkdir -p dist
      
      - name: Download builds
        uses: actions/download-artifact@v2
        with:
          path: dist

          
      - name: Display structure of downloaded files
        run: ls -R

      # - name: Upload release
      #   uses: softprops/action-gh-release@v1
      #   with:
      #     body_path: CHANGELOG.md
      #     files: |
      #       dist/${{ env.RELEASE_BIN }}-win64.tar.gz
      #       dist/${{ env.RELEASE_BIN }}-win32.tar.gz
      #       dist/${{ env.RELEASE_BIN }}-linux.tar.gz
      #       dist/${{ env.RELEASE_BIN }}-macos.tar.gz
      #   env:
      #     GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      # - name: Publish npm package
      #   env:
      #     NPM_ACCESS_TOKEN: ${{ secrets.NPM_ACCESS_TOKEN }}
      #   run: |
      #     echo "//registry.npmjs.org/:_authToken=$NPM_ACCESS_TOKEN" > ".npmrc"
      #     npm publish
      # - name: Publish cargo package
      #   env:
      #     CARGO_ACCESS_TOKEN: ${{ secrets.CARGO_ACCESS_TOKEN }}
      #   run: |
      #     cargo login "$CARGO_ACCESS_TOKEN"
      #     cargo publish
      # - name: Publish docs
      #   env:
      #     NETLIFY_BUILD_HOOK: ${{ secrets.NETLIFY_BUILD_HOOK }}
      #   run: curl -X POST -d {} "$NETLIFY_BUILD_HOOK"